{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "databaseName": {
            "type": "string",
            "metadata": {
                "description": "(Required) Name of the SQL database to deploy."
            }
        },
        
        "sqlServerName": {
            "type": "string",
            "metadata": {
                "description": "(Required) Name of the SQL server to deploy this database to."
            }
        },
        "elasticPoolName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "(Optional) Name of the elastic pool containing this database, used in the resource id to reference the elastic pool."
            }
        },
        "databaseSkuName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "(Required) The database SKU names e.g. S0 or GP_S_Gen5_6. Not required if deployToElasticPool is true."
            }
        },
        "databaseSizeBytes": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "(Optional) The max size of the database expressed in bytes."
            }
        },
        "databaseTier": {
            "type": "string",
            "defaultValue": "",
            "allowedValues": [
                "",
                "Basic",
                "Standard",
                "Premium",
                "GeneralPurpose",
                "BusinessCritical",
                "Hyperscale"
            ],
            "metadata": {
                "description": "(Optional) The database SKU, equired if not using elastic pool."
            }
        },
        "serverlessMinCapacity": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "(Optional) Minimal capacity that database will always have allocated, if not paused To specify a decimal value, use the json() function."
            }
        },
        "serverlessAutoPauseDelay": {
            "type": "string",
            "defaultValue": "-1",
            "metadata": {
                "description": "(Optional) Time in minutes after which database is automatically paused. A value of -1 means that automatic pause is disabled."
            }
        },
        "dataMaskingExemptPrincipals": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "(Optional) Semi-colon separated list of database principals who are exempt from the following data masking rules."
            }
        },
        "dataMaskingRules": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "(Optional) Object array where object is of type DataMaskingRuleProperties: https://docs.microsoft.com/en-us/azure/templates/microsoft.sql/servers/databases/datamaskingpolicies/rules#DataMaskingRuleProperties."
            }
        },
        "diagnosticsRetentionDays": {
            "type": "int",
            "defaultValue": 0,
            "minValue": 0,
            "maxValue": 365,
            "metadata": {
                "descrtiption": "(Optional) The number of days that diagnostic logs will be stored for. Default value is forever, max is 1 year."
            }
        },
        "logAnalyticsSubscriptionId": {
            "type": "string",
            "defaultValue": "[subscription().subscriptionId]",
            "metadata": {
            "description": "(Optional) The id of the subscription for the Log Analytics Workspace used for diagnostics settings. This defaults to the current subscription."
         }
        },
        "logAnalyticsResourceGroup": {
            "type": "string",
            "defaultValue" : "[resourceGroup().name]",
            "metadata": {
                "description": "(Optional) The resource group of the Log Analytics Workspace used for diagnostics settings."
            }
        },
        "logAnalyticsWorkspaceName": {
            "type": "string",
            "defaultValue" : "",
            "metadata": {
                "description": "(Optional) The name of the Log Analytics Workspace used for diagnostics settings."
            }
        },
        "createMode":{
            "type": "string",
            "defaultValue": "Default",
            "allowedValues": [
                "Default",
                "Secondary"
            ],
            "metadata": {
                "description": "(Optional) Specifies the mode of database creation, modes explained: https://learn.microsoft.com/en-us/azure/templates/microsoft.sql/servers/databases?pivots=deployment-language-arm-template#databaseproperties-1"
            }
        },
        "sourceDatabaseId":{
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "(Optional) The resourceId of the source database associated with create operation of this database if createMode is not 'Default'."
            }
        },
        "requestedBackupStorageRedundancy":{
            "type": "string",
            "defaultValue": "Geo",
            "metadata": {
                "description": "(Optional) The storage account type to be used to store backups for this database."
            }
        }
    },
    "variables": {
        "deployToElasticPool": "[greater(length(parameters('elasticPoolName')), 0)]",
        "databaseSettings": {
            "nonElasticPool": {
                "sku": {
                    "name": "[parameters('databaseSkuName')]",
                    "tier": "[parameters('databaseTier')]"
                },
                "properties": {
                    "maxSizeBytes": "[parameters('databaseSizeBytes')]",
                    "minCapacity": "[parameters('serverlessMinCapacity')]",
                    "autoPauseDelay": "[parameters('serverlessAutoPauseDelay')]",
                    "createMode": "[parameters('createMode')]",
                    "sourceDatabaseId": "[if(equals(parameters('createMode'),'Secondary'), parameters('sourceDatabaseId'), null())]",
                    "requestedBackupStorageRedundancy": "[parameters('requestedBackupStorageRedundancy')]"
                }
            },
            "elasticPool": {
                "sku": {
                    "name": "ElasticPool"
                },
                "properties": {
                    "elasticPoolId": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Sql/servers/', parameters('sqlServerName'), '/elasticPools/', parameters('elasticPoolName'))]"
                }
            }
        },
        "diagnosticsSettings": [
            "QueryStoreRuntimeStatistics",
            "QueryStoreWaitStatistics",
            "Errors",
            "DatabaseWaitStatistics",
            "Timeouts",
            "Blocks",
            "SQLInsights",
            "AutomaticTuning",
            "Deadlocks"
        ]
    },
    "resources": [
        {
            "name": "[concat(parameters('sqlServerName'), '/', parameters('databaseName'))]",
            "type": "Microsoft.Sql/servers/databases",
            "apiVersion": "2017-10-01-preview",
            "location": "[resourceGroup().location]",
            "sku": "[if(variables('deployToElasticPool'), variables('databaseSettings').elasticPool.sku, variables('databaseSettings').nonElasticPool.sku)]",
            "properties": "[if(variables('deployToElasticPool'), variables('databaseSettings').elasticPool.properties, variables('databaseSettings').nonElasticPool.properties)]",
            "resources": [
                {
                    "name": "current",
                    "condition": "[not(equals(parameters('createMode'),'Secondary'))]",
                    "type": "transparentDataEncryption",
                    "apiVersion": "2024-05-01-preview",
                    "properties": {
                        "state": "Enabled"
                    },
                    "dependsOn": [
                        "[parameters('databaseName')]"
                    ]
                }
            ]
        },        
        {
      "type": "Microsoft.Sql/servers/databases/providers/diagnosticSettings",
      "name": "[concat(parameters('sqlServerName'), '/', parameters('databaseName'), '/Microsoft.Insights/service')]",
      "condition": "[greater(length(parameters('logAnalyticsWorkspaceName')), 0)]",      
      "apiVersion": "2017-05-01-preview",
      "properties": {
        "workspaceId": "[resourceId(parameters('logAnalyticsSubscriptionId'), parameters('logAnalyticsResourceGroup'), 'Microsoft.OperationalInsights/Workspaces',parameters('logAnalyticsWorkspaceName'))]",
        "copy": [
          {
            "name": "logs",
            "count": "[length(variables('diagnosticsSettings'))]",
            "input": {
              "category": "[variables('diagnosticsSettings')[copyIndex('logs')]]",
              "enabled": true,
              "retentionPolicy": {
                "days": "[parameters('diagnosticsRetentionDays')]",
                "enabled": true
              }
            }
          }
        ],
        "metrics": [
          {
            "timeGrain": "AllMetrics",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[parameters('diagnosticsRetentionDays')]"
            }
          }
        ]
      },
      "dependsOn": [
        "[parameters('databaseName')]"
      ]
    },
    {
            "name": "[concat(parameters('sqlServerName'), '/', parameters('databaseName'), '/Default')]",
            "condition": "[greater(length(parameters('dataMaskingRules')), 0)]",
            "type": "Microsoft.Sql/servers/databases/dataMaskingPolicies",
            "apiVersion": "2024-05-01-preview",
            "properties": {
                "dataMaskingState": "Enabled",
                "exemptPrincipals": "[parameters('dataMaskingExemptPrincipals')]"
            }
        },
        {
            "name": "[concat(parameters('sqlServerName'), '/', parameters('databaseName'), '/Default/', if(greater(length(parameters('dataMaskingRules')), 0), concat(parameters('dataMaskingRules')[copyIndex()].schemaName, parameters('dataMaskingRules')[copyIndex()].tableName, parameters('dataMaskingRules')[copyIndex()].columnName),'placeholder'))]",
            "condition": "[greater(length(parameters('dataMaskingRules')), 0)]",
            "type": "Microsoft.Sql/servers/databases/dataMaskingPolicies/rules",
            "apiVersion": "2024-05-01-preview",
            "properties": "[parameters('dataMaskingRules')[copyIndex()]]",
            "copy": {
                "name": "dataMaskingRuleCopy",
                "count": "[if(greater(length(parameters('dataMaskingRules')), 0), length(parameters('dataMaskingRules')), 1)]"
            }
        }
    ],
    "outputs": {
        "sqlDatabaseResourceId": {
            "type": "string",
            "value": "[resourceId('Microsoft.Sql/servers/databases', parameters('sqlServerName'), parameters('databaseName'))]"
        }
    }
}
